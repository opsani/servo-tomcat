#!/usr/bin/env python3
"""
Optune 'adjust' driver for Tomcat service.
(C) 2018, Opsani.
use:

TBD

adjust --version
adjust --info
adjust --query app_name
adjust app_name <settings-file.json
This script requires a configuration file placed at a fixed location (see
DESC_FILE constant below). The file should contain the complete formatted
reply to be sent in response to '--query' (see the TDR External Commands draft
document), including default values for all settings (which should match the
value the application would use in case the setting is not provided explicitly
or is empty). The key under 'components' is the name service to be adjusted

Example DESC_FILE:

components:
  tomcat:
     settings:
       InitialHeapSize: {}
       MaxHeapSize: {}
       MaxGCPauseMillis: {}
       MaxGCMinorPauseMillis: {}
       GCTimeRatio: {}

"""


from __future__ import print_function    # py2 compatibility

import os
import re
import subprocess
import tempfile
import time
import yaml
import requests

from adjust import Adjust

DESC = "Tomcat adjust driver for Opsani Optune"
VERSION = "1.0.0"
HAS_CANCEL = False

DESC_FILE = "./app-desc.yaml"
DRIVER_NAME="tomcat"
JAVA_PRINT_FLAGS = "-XX:+PrintFlagsFinal -version"
JAVA_EXEC_CMD = 'exec ${JAVA_CMD} ${APP_ARGS}'

HCK_SLEEP_S = 5

# Regexp to be use to update tomcat command line in otrder to get java settings
JAVA_CMD_RE = r'^(.*)(org.apache.catalina.startup.Bootstrap \\)$'


OPTUNE_DRIVER_ANCHOR = "__OPTUNE_DRIVER_ANCHOR__"

class TomcatDriver(Adjust):

    def _run_cmd(self, cmd):
        '''
        Takes a command (as a list of strings), runs it and returns exit_code,
        stdout (list of lines) and stderr (list of lines)
        '''

        out = []
        err = []

        proc = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        for line in proc.stdout.readlines():
            out.append(line)

        for line in proc.stderr.readlines():
            err.append(line)

        return_code = proc.wait()

        return return_code, out, err


    def _parse_jvm_settings(self, lines):
        '''
        Takes a list of strings, i.e. the output of java with flags
        `-XX:+PrintFlagsFinal -version`

        Returns a dict where the keys are the flag names and the values are
        dicts with two keys: type and value of the flag
        '''

        java_curr_settings = {}
        anchor_found = False
        for line in lines[1:]:
            line = line.decode()

            if OPTUNE_DRIVER_ANCHOR in line:
                anchor_found = True

            if not anchor_found:
                continue

            m = re.search(r'^\s*(\S+)\s+(\S+)\s+:?=\s+(\S+)\s+{.+}$', line)
            if m:
                t = m.group(1)
                name = m.group(2)
                value = m.group(3)

                if t == "intx" or t == "uint64_t" or t == "uintx":
                    value = int(value)
                elif t == "double":
                    value = float(value)
                elif t == "bool":
                    value = True if value == "true" else False

                java_curr_settings[name] = {
                    "type": t,
                    "value": value,
                }

        return java_curr_settings

    def _parse_app_desc(self):
        '''
        load the user-defined application descriptor
        '''

        try:
            f = open(DESC_FILE)
            d = yaml.load(f)
        except IOError as e:
            raise Exception(
                "cannot read configuration from {}:{}".format(DESC_FILE, e.strerror))
        except yaml.error.YAMLError as e:
            raise Exception("syntax error in {}: {}".format(DESC_FILE, str(e)))
        # everything else: raise

        # Valchk
        if not "components" in d:
            raise Exception(
                "Missing components key in app descriptor {}".format(DESC_FILE))

        # Valchk
        if len(d["components"].keys()) != 1:
            raise Exception(
                "App descriptor error: must have exactly one component")

        # TODO: check that we have list of instances for each comp

        # TODO: check that we have commands to start/stop tomcat service

        # TODO: check that we have a path to tomcat start script

        return d

    def _get_remote_file(self, host, remote_path, local_path, ssh_opts):

        cmd = ['scp']
        cmd.extend(ssh_opts)
        cmd.append(host + ":" + remote_path)
        cmd.append(local_path)

        exit_code, out, err = self._run_cmd(cmd)

        if exit_code != 0:
            msg = "Failed to get remote file {}, from host {}. Command {} " + \
                "returned exit code {}. STDOUT {}, STDERR {}"
            msg = msg.format(remote_path, host, str(cmd), exit_code, str(out), str(err))
            raise Exception(msg)

    def _put_remote_file(self, host, local_path, remote_path, ssh_opts):

        cmd = ['scp']
        cmd.extend(ssh_opts)
        cmd.append(local_path)
        cmd.append(host + ":" + remote_path)

        exit_code, out, err = self._run_cmd(cmd)

        if exit_code != 0:
            msg = "Failed to put file {}, to host {}. Command {} " + \
                "returned exit code {}. STDOUT {}, STDERR {}"
            msg = msg.format(remote_path, host, str(cmd), exit_code, str(out), str(err))
            raise Exception(msg)

        # Make file executable
        cmd = ['ssh']
        cmd.extend(ssh_opts)
        cmd.extend([host, "chmod", "+x", remote_path])

        exit_code, out, err = self._run_cmd(cmd)

        if exit_code != 0:
            msg = "Failed to make file {} executable on host {}. Command {} " + \
                "returned exit code {}. STDOUT {}, STDERR {}"
            msg = msg.format(remote_path, host, str(
                cmd), exit_code, str(out), str(err))
            raise Exception(msg)

    def _run_remote_cmd(self, host, cmd, ssh_opts):
        r_cmd = ["ssh"]
        r_cmd.extend(ssh_opts)
        r_cmd.append(host)
        r_cmd.extend(cmd)

        exit_code, out, err = self._run_cmd(r_cmd)

        if exit_code != 0:
            msg = "Failed to run command {} executable on host {}, it " + \
                "returned exit code {}. STDOUT {}, STDERR {}"
            msg = msg.format(cmd, host, exit_code, str(out), str(err))
            raise Exception(msg)

        return out


    def _get_ssh_opts_from_desc(self, desc):
        try:
            ssh_opts = desc["ssh_opts"].split()
        except Exception as e:
            ssh_opts = []

        return ssh_opts

    def _update_remote_tomcat_start_script(self, host, get_file, put_file, ssh_opts, line_xfrom_fn):
        with tempfile.NamedTemporaryFile() as fh:
            temp_file = fh.name

            # Get current tomcat config
            self._get_remote_file(host, get_file, temp_file, ssh_opts)

            # Modify tomcat file so it can query settings
            lines = []
            # Read file and update in memory
            for line in fh.readlines():
                line = line.decode()

                updated_line, is_last = line_xfrom_fn(line)
                lines.append(updated_line)
                if is_last: break

        # Create new temp file with modified content and upload to remote host
        _, temp_file = tempfile.mkstemp()
        try:
            with open(temp_file, 'w') as f:
                for line in lines:
                    f.write(line)
            # Upload file
            self._put_remote_file(host, temp_file, put_file, ssh_opts)
        except Exception as e:
            raise Exception(
                "Failed to update tomcat file {}: {}".format(temp_file, str(e))
            )
        finally:
            os.unlink(temp_file)

    def _get_java_settings(self, host, tomcat_start_path, ssh_opts, extra_settings):

        tomcat_start_path_tmp = tomcat_start_path + '.tmp'

        def line_xfrom_fn(line):
            m = re.search(JAVA_CMD_RE, line)
            if not m:
                return line, False
            else:
                ret_line = m.group(1) + extra_settings + \
                    " " + JAVA_PRINT_FLAGS + '"\n\n'
                ret_line += 'echo ' + OPTUNE_DRIVER_ANCHOR + '\n'
                ret_line += JAVA_EXEC_CMD + '\n'
                return ret_line, True

        self._update_remote_tomcat_start_script(
            host, tomcat_start_path, tomcat_start_path_tmp, ssh_opts,
            line_xfrom_fn)

        # Run file remotely and capture output
        out = self._run_remote_cmd(host, [tomcat_start_path_tmp], ssh_opts)

        # Parse JVM settings
        return self._parse_jvm_settings(out)

    def _get_curr_java_settings(self, host, tomcat_start_path, ssh_opts):
        return self._get_java_settings(host, tomcat_start_path, ssh_opts, "")

    # Overwritten
    def query(self):
        # Parse app descriptor
        desc = self._parse_app_desc()

        svc_name = list(desc["components"].keys())[0]

        ssh_opts = self._get_ssh_opts_from_desc(desc["driver"][DRIVER_NAME])

        # TODO: do for each instance and make sure results match
        host = desc["driver"][DRIVER_NAME]["instances"][svc_name][0]

        tomcat_start_path = desc["driver"][DRIVER_NAME]["start_file"]

        java_curr_settings = self._get_curr_java_settings(
            host, tomcat_start_path, ssh_opts)

        # Populate settings from the app descriptor with their actual values
        settings = desc["components"][svc_name]["settings"]
        for k in settings.keys():
            if not k in settings:
                raise Exception(
                    "Counld not find setting {} in current JVM settings".format(k))

            curr = java_curr_settings[k]
            settings[k]["value"] = curr["value"]
            settings[k]["type"] = "range"
            settings[k]["step"] = 1

            # Convert bools to an int with range 0-1
            if curr["type"] == "bool":
                settings[k]["value"] = 1 if curr["value"] else 0
                settings[k]["min"] = 0
                settings[k]["max"] = 1

        ret = {
            "components": {
                svc_name: {
                    "settings": settings
                }
            }
        }

        return ret

    # Overwritten
    def adjust(self):
        # Parse app descriptor
        desc = self._parse_app_desc()

        svc_name = list(desc["components"].keys())[0]

        ssh_opts = self._get_ssh_opts_from_desc(desc["driver"][DRIVER_NAME])

        tomcat_start_path = desc["driver"][DRIVER_NAME]["start_file"]

        tomcat_restart_cmd = desc["driver"][DRIVER_NAME]["restart_cmd"].split()

        hosts = desc["driver"][DRIVER_NAME]["instances"][svc_name]

        # Validate input
        if not "application" in self.input_data:
            raise Exception("Invalid input: missing application key")

        if not "components" in self.input_data["application"]:
            raise Exception(
                "Invalid input: missing application.components key")

        if not svc_name in self.input_data["application"]["components"]:
            raise Exception(
                "Invalid input: component {} not found in input data".format(
                    svc_name
                ))

        if not "settings" in self.input_data["application"]["components"][svc_name]:
            raise Exception(
                "Invalid input: settings key not present for component " + svc_name
            )

        settings = self.input_data["application"]["components"][svc_name]["settings"]

        if not isinstance(settings, dict):
            raise Exception(
                "Invalid input: settings for component {} must be a dict".format(
                    svc_name
                ))

        for host in hosts:
            # TODO: What to do when one host fails?

            self.debug("Updating host", host)

            java_curr_settings = self._get_curr_java_settings(
                host, tomcat_start_path, ssh_opts)

            # Convert Optune seetings to java settings
            java_settings = ""
            for k in settings.keys():
                v = settings[k]["value"]
                curr = java_curr_settings[k]
                if curr["type"] == "bool":
                    java_settings += " -XX:{}{}".format("+" if v else "-", k)
                elif curr["type"] == "intx" or curr["type"] == "uint64_t" or curr["type"] == "uintx":
                    java_settings += " -XX:{}={}".format(k, int(v))
                else:
                    java_settings += " -XX:{}={}".format(k, v)

            # Do a dry run with the new settings
            try:
                self._get_java_settings(
                    host, tomcat_start_path, ssh_opts, java_settings)
            except Exception as e:
                raise Exception(
                    "Failed to do a dry run for adjustment: {}".format(str(e))
                )

            def line_xfrom_fn(line):
                m = re.search(JAVA_CMD_RE, line)

                if not m:
                    return line, False
                else:
                    ret_line = java_settings + " " + m.group(2) + '\n'
                    return ret_line, False

            # Update tomcat config
            self._update_remote_tomcat_start_script(
                host, tomcat_start_path, tomcat_start_path, ssh_opts,
                line_xfrom_fn)

            # Restart tomcat
            self._run_remote_cmd(host, tomcat_restart_cmd, ssh_opts)

            # Run healtcheck
            if not 'health_check_url' in desc["driver"][DRIVER_NAME]:
                self.debug("Skipping healthcheck")
                continue

            hchk_url = desc["driver"][DRIVER_NAME]['health_check_url'].format(host)
            hchk_timeout = desc["driver"][DRIVER_NAME]["health_check_timeout"]
            hchk_ok_string = desc["driver"][DRIVER_NAME]["health_check_ok_string"]

            run_until_ts = time.time() + hchk_timeout
            host_healthy = False

            while time.time() < run_until_ts:
                self.debug("Running healthcheck for url", hchk_url)
                try:
                    r = requests.get(hchk_url, verify=False)
                    assert(r.status_code == 200), \
                        "Healthcheck returned status " + str(r.status_code)
                    assert(hchk_ok_string in r.text), \
                        "Did not find string '{}' in healthcheck response".format(
                            hchk_ok_string)

                    host_healthy = True
                    self.debug("Healthcheck succeeded")
                    break
                except Exception as e:
                    self.debug("Healthcheck try failed, error was:", e)
                    time.sleep(HCK_SLEEP_S)

            if not host_healthy:
                raise Exception(
                    "Host {} did not return healthcheck reponse {} in {} seconds".format(
                        host, hchk_ok_string, hchk_timeout))


        self.debug("Sucessfully updated all settings")


if __name__ == '__main__':
    driver = TomcatDriver(VERSION, DESC, HAS_CANCEL)
    driver.run()
